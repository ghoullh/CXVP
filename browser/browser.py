import asyncio
import os
import shutil
import threading
from typing import Optional

import nodriver

from utils.util import get_logger

logger = get_logger(__name__)


class Browser:

    _instance = None
    _operation_lock = threading.Lock()

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            logger.info("Create browser")
            cls._instance = super(Browser, cls).__new__(cls, *args, **kwargs)
            cls._instance._initialized = False
        return cls._instance

    def __init__(self, browser_directory="./chrome"):
        if self._initialized:
            return
        self._browser_directory = browser_directory
        self._initialized = True
        self._browser: Optional[nodriver.Browser] = None
        self._chrome_version = os.environ.get("CHROME_VERSION")
        logger.info(f"Current CHROME_VERSION: {self._chrome_version}")
        asyncio.run(self.start_browser())

    async def start_browser(self):
        try:
            logger.info('Start initializing the browser')
            self._delete_chrome_lock()
            self._browser = await nodriver.start(user_data_dir=self._browser_directory,
                                                 browser_args=["--window-size=1600,900",
                                                               "--disable-gpu",
                                                               "--disable-dev-shm-usage"])
            logger.info("Browser is opened")
        except Exception as e:
            logger.exception(e)
            logger.error(f"Start chrome browser error, exit")
            os._exit(-1)

    def _delete_chrome_lock(self):
        """
        Aim to delete the locks generated by Chrome to prevent the browser from starting each time,
         in case Chrome detect some suspicious actions were taken.
        """

        file_to_remove = ['SingletonCookie', 'SingletonLock', 'SingletonSocket']
        with os.scandir(self._browser_directory) as entries:
            for entry in entries:
                if entry.name in file_to_remove:
                    file_path = os.path.join(self._browser_directory, entry.name)
                    os.remove(file_path)
                else:
                    pass
        cache_dir = os.path.join(self._browser_directory, 'Default')
        if os.path.exists(cache_dir):
            for file in os.listdir(cache_dir):
                if file in ('Preferences', "Cache", "Code Cache"):
                    file_path = os.path.join(cache_dir, file)
                    try:
                        if os.path.isdir(file_path):
                            logger.info(f"remove dir: {file_path} ")
                            shutil.rmtree(file_path)
                        else:
                            logger.info(f"remove file: {file_path} ")
                            os.remove(file_path)
                    except Exception:
                        logger.error(f"Delete file error: {file_path}")

    async def execute(self, execute_type, execute_value):
        if execute_type == 'open_url':
            if isinstance(execute_value, str):
                await self._browser.get(execute_value)


CHROME = Browser()
